# Generated by Django 3.2.5 on 2021-07-01 13:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=100, verbose_name='유저 닉네임')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.CharField(max_length=100, verbose_name='스터디 이름')),
                ('study_subject', models.CharField(choices=[('TOEIC', 'TOEIC'), ('TOEIC SPEAKING', 'TOEIC SPEAKING'), ('TOEFL', 'TOEFL'), ('OPIC', 'OPIC'), ('HSK', 'HSK'), ('JLPT', 'JLPT')], default='TOEIC', max_length=50)),
                ('study_limit', models.CharField(max_length=100, verbose_name='스터디 수준')),
                ('study_people', models.IntegerField(verbose_name='스터디 인원수')),
                ('study_place', models.CharField(choices=[('online', '온라인'), ('offline', '오프라인')], default='online', max_length=50)),
                ('study_time', models.TextField(verbose_name='스터디 시간')),
                ('study_detail', models.TextField(verbose_name='스터디 설명')),
            ],
        ),
        migrations.CreateModel(
            name='Validation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opic', models.BooleanField(default=False, verbose_name='opic')),
                ('opic_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='오픽 수준')),
                ('opic_validation', models.ImageField(blank=True, null=True, upload_to='validations')),
                ('toeic', models.BooleanField(default=False, verbose_name='toeic')),
                ('toeic_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='토익 수준')),
                ('toeic_validation', models.ImageField(blank=True, null=True, upload_to='validations')),
                ('toefl', models.BooleanField(default=False, verbose_name='toefl')),
                ('toefl_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='토플 수준')),
                ('toefl_validation', models.ImageField(blank=True, null=True, upload_to='validations')),
                ('toeic_speaking', models.BooleanField(default=False, verbose_name='toeic speaking')),
                ('toeic_speaking_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='토익 스피킹 수준')),
                ('toeic_speaking_validation', models.ImageField(blank=True, null=True, upload_to='validations')),
                ('jlpt', models.BooleanField(default=False, verbose_name='JLPT')),
                ('jlpt_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='JLPT 수준')),
                ('jlpt_validation', models.ImageField(blank=True, null=True, upload_to='validations')),
                ('hsk', models.BooleanField(default=False, verbose_name='HSK')),
                ('hsk_class', models.CharField(blank=True, max_length=100, null=True, verbose_name='HSK 수준')),
                ('hsk_validation', models.ImageField(blank=True, null=True, upload_to='validations')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('studies', models.ManyToManyField(blank=True, related_name='studies', to='agongda.Study', verbose_name='스터디')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('validations', models.ManyToManyField(blank=True, related_name='validations', to='agongda.Validation', verbose_name='인증 수준')),
            ],
        ),
    ]
